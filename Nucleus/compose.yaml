services:
  db-migrate:
    image: nucleus:latest
    container_name: nucleus-migrate
    command: ["./efbundle", "--connection", "Host=postgres;Port=5432;Database=nucleus_db;Username=nucleus_user;Password=${POSTGRES_PASSWORD}"]
    networks:
      - app-network
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: "no"
    depends_on:
      postgres:
        condition: service_healthy

  nucleus:
    image: nucleus:latest
    build:
      context: .
      dockerfile: Dockerfile
    container_name: nucleus
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - ASPNETCORE_ENVIRONMENT=Production
      - ApexLegendsApiKey=${ApexLegendsApiKey}
      - DiscordClientId=${DiscordClientId}
      - DiscordClientSecret=${DiscordClientSecret}
      - FrontendOrigin=${FrontendOrigin}
      - DatabaseConnectionString=Host=postgres;Port=5432;Database=nucleus_db;Username=nucleus_user;Password=${POSTGRES_PASSWORD}
      - BunnyAccessKey=${BunnyAccessKey}
      - BunnyLibraryId=${BunnyLibraryId}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      db-migrate:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
  
  postgres:
    image: postgres:16
    container_name: postgres
    restart: unless-stopped
    networks:
      - app-network
    environment:
      - POSTGRES_DB=nucleus_db
      - POSTGRES_USER=nucleus_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nucleus_user -d nucleus_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  caddy:
    image: caddy:latest
    container_name: caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - app-network
    depends_on:
      - nucleus

networks:
  app-network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
  postgres_data: